time_steps = [1.953125, 3.90625, 5.859375, 7.8125, 9.765625, 11.71875, 13.671875, 15.625, 17.578125, 19.53125, 21.484375, 23.4375, 25.390625, 27.34375, 29.296875, 31.25, 33.203125, 35.15625, 37.109375, 39.0625, 41.015625, 42.96875, 44.921875, 46.875, 48.828125, 50.78125, 52.734375, 54.6875, 56.640625, 58.59375, 60.546875, 62.5, 64.453125, 66.40625, 68.359375, 70.3125, 72.265625, 74.21875, 76.171875, 78.125, 80.078125, 82.03125, 83.984375, 85.9375, 87.890625, 89.84375, 91.796875, 93.75, 95.703125, 97.65625, 99.609375, 101.5625, 103.515625, 105.46875, 107.421875, 109.375, 111.328125, 113.28125, 115.234375, 117.1875, 119.140625, 121.09375, 123.046875, 125.0, 126.953125, 128.90625, 130.859375, 132.8125, 134.765625, 136.71875, 138.671875, 140.625, 142.578125, 144.53125, 146.484375, 148.4375, 150.390625, 152.34375, 154.296875, 156.25, 158.203125, 160.15625, 162.109375, 164.0625, 166.015625, 167.96875, 169.921875, 171.875, 173.828125, 175.78125, 177.734375, 179.6875, 181.640625, 183.59375, 185.546875, 187.5, 189.453125, 191.40625, 193.359375, 195.3125, 197.265625, 199.21875, 201.171875, 203.125, 205.078125, 207.03125, 208.984375, 210.9375, 212.890625, 214.84375, 216.796875, 218.75, 220.703125, 222.65625, 224.609375, 226.5625, 228.515625, 230.46875, 232.421875, 234.375, 236.328125, 238.28125, 240.234375, 242.1875, 244.140625, 246.09375, 248.046875, 250.0, 251.953125, 253.90625, 255.859375, 257.8125, 259.765625, 261.71875, 263.671875, 265.625, 267.578125, 269.53125, 271.484375, 273.4375, 275.390625, 277.34375, 279.296875, 281.25, 283.203125, 285.15625, 287.109375, 289.0625, 291.015625, 292.96875, 294.921875, 296.875, 298.828125, 300.78125, 302.734375, 304.6875, 306.640625, 308.59375, 310.546875, 312.5, 314.453125, 316.40625, 318.359375, 320.3125, 322.265625, 324.21875, 326.171875, 328.125, 330.078125, 332.03125, 333.984375, 335.9375, 337.890625, 339.84375, 341.796875, 343.75, 345.703125, 347.65625, 349.609375, 351.5625, 353.515625, 355.46875, 357.421875, 359.375, 361.328125, 363.28125, 365.234375, 367.1875, 369.140625, 371.09375, 373.046875, 375.0, 376.953125, 378.90625, 380.859375, 382.8125, 384.765625, 386.71875, 388.671875, 390.625, 392.578125, 394.53125, 396.484375, 398.4375, 400.390625, 402.34375, 404.296875, 406.25, 408.203125, 410.15625, 412.109375, 414.0625, 416.015625, 417.96875, 419.921875, 421.875, 423.828125, 425.78125, 427.734375, 429.6875, 431.640625, 433.59375, 435.546875, 437.5, 439.453125, 441.40625, 443.359375, 445.3125, 447.265625, 449.21875, 451.171875, 453.125, 455.078125, 457.03125, 458.984375, 460.9375, 462.890625, 464.84375, 466.796875, 468.75, 470.703125, 472.65625, 474.609375, 476.5625, 478.515625, 480.46875, 482.421875, 484.375, 486.328125, 488.28125, 490.234375, 492.1875, 494.140625, 496.09375, 498.046875, 500.0, 501.953125, 503.90625, 505.859375, 507.8125, 509.765625, 511.71875, 513.671875, 515.625, 517.578125, 519.53125, 521.484375, 523.4375, 525.390625, 527.34375, 529.296875, 531.25, 533.203125, 535.15625, 537.109375, 539.0625, 541.015625, 542.96875, 544.921875, 546.875, 548.828125, 550.78125, 552.734375, 554.6875, 556.640625, 558.59375, 560.546875, 562.5, 564.453125, 566.40625, 568.359375, 570.3125, 572.265625, 574.21875, 576.171875, 578.125, 580.078125, 582.03125, 583.984375, 585.9375, 587.890625, 589.84375, 591.796875, 593.75, 595.703125, 597.65625, 599.609375, 601.5625, 603.515625, 605.46875, 607.421875, 609.375, 611.328125, 613.28125, 615.234375, 617.1875, 619.140625, 621.09375, 623.046875, 625.0, 626.953125, 628.90625, 630.859375, 632.8125, 634.765625, 636.71875, 638.671875, 640.625, 642.578125, 644.53125, 646.484375, 648.4375, 650.390625, 652.34375, 654.296875, 656.25, 658.203125, 660.15625, 662.109375, 664.0625, 666.015625, 667.96875, 669.921875, 671.875, 673.828125, 675.78125, 677.734375, 679.6875, 681.640625, 683.59375, 685.546875, 687.5, 689.453125, 691.40625, 693.359375, 695.3125, 697.265625, 699.21875, 701.171875, 703.125, 705.078125, 707.03125, 708.984375, 710.9375, 712.890625, 714.84375, 716.796875, 718.75, 720.703125, 722.65625, 724.609375, 726.5625, 728.515625, 730.46875, 732.421875, 734.375, 736.328125, 738.28125, 740.234375, 742.1875, 744.140625, 746.09375, 748.046875, 750.0, 751.953125, 753.90625, 755.859375, 757.8125, 759.765625, 761.71875, 763.671875, 765.625, 767.578125, 769.53125, 771.484375, 773.4375, 775.390625, 777.34375, 779.296875, 781.25, 783.203125, 785.15625, 787.109375, 789.0625, 791.015625, 792.96875, 794.921875, 796.875, 798.828125, 800.78125, 802.734375, 804.6875, 806.640625, 808.59375, 810.546875, 812.5, 814.453125, 816.40625, 818.359375, 820.3125, 822.265625, 824.21875, 826.171875, 828.125, 830.078125, 832.03125, 833.984375, 835.9375, 837.890625, 839.84375, 841.796875, 843.75, 845.703125, 847.65625, 849.609375, 851.5625, 853.515625, 855.46875, 857.421875, 859.375, 861.328125, 863.28125, 865.234375, 867.1875, 869.140625, 871.09375, 873.046875, 875.0, 876.953125, 878.90625, 880.859375, 882.8125, 884.765625, 886.71875, 888.671875, 890.625, 892.578125, 894.53125, 896.484375, 898.4375, 900.390625, 902.34375, 904.296875, 906.25, 908.203125, 910.15625, 912.109375, 914.0625, 916.015625, 917.96875, 919.921875, 921.875, 923.828125, 925.78125, 927.734375, 929.6875, 931.640625, 933.59375, 935.546875, 937.5, 939.453125, 941.40625, 943.359375, 945.3125, 947.265625, 949.21875, 951.171875, 953.125, 955.078125, 957.03125, 958.984375, 960.9375, 962.890625, 964.84375, 966.796875, 968.75, 970.703125, 972.65625, 974.609375, 976.5625, 978.515625, 980.46875, 982.421875, 984.375, 986.328125, 988.28125, 990.234375, 992.1875, 994.140625, 996.09375, 998.046875, 1000.0]
import pyNN.spiNNaker as sim
import numpy as np
import os
import datetime
import time

now = datetime.datetime.now()
date_time_string = now.strftime("%Y-%m-%d_%H-%M-%S")
path = ""
filename = os.path.join(path, f"check_resolution_runtime_1000_neuron_{date_time_string}.txt")

cell_params_out = {'cm'        : 0.25,
                   'i_offset'  : 0.0,
                   'tau_m'     : 5.0,
                   'tau_refrac': 0.0,
                   'tau_syn_E' : 0.5,
                   'tau_syn_I' : 5.0,
                   'v_reset'   : -70.0,
                   'v_rest'    : -65.0,
                   'v_thresh'  : -50.0
                   }

cell_params_sync = {'tau_m'     :3.0,
                    'tau_syn_E' :0.5,
                    'tau_syn_I' :0.5,
                    'tau_refrac':0.0,
                    'i_offset'  :0.0,
                    }

runtime=1000

with open(filename, "w") as file:
    file.write(str('Runtime [ms]: ') + str(runtime) + str('\n'))
    file.write(str('time_steps [ms]: \n') + str(time_steps)+ str('\n'))
    file.write("Run no. [-] | Theoretical number of spikes (len of time_steps) [-] | Simulated number of spikes source (p_const) [-] | Simulated number of spikes out (p_out)\n")

    for i in range (200):
        print(str('Run: ') + str(i+1))

        sim.setup(timestep=1, min_delay=1.0, max_delay=16.0, time_scale_factor=1)

        p_const = sim.Population(1, sim.SpikeSourceArray,{'spike_times': [time_steps]}, label="constants")
        p_out = sim.Population(1, sim.IF_curr_exp(**cell_params_sync), label='out')

        w_const_out = 40.9

        connections_const_out = [
        (0, 0, w_const_out, 0),
        ]

        connector_const_out = sim.FromListConnector(connections_const_out, column_names=["weight", "delay"])

        sim.Projection(p_const, p_out, connector_const_out, receptor_type="excitatory",
                            synapse_type=sim.StaticSynapse(weight=connector_const_out))

        p_const.record('all')
        p_out.record('all')

        sim.run(runtime)

        s_p_const=p_const.get_data("spikes")
        n_s_p_const=p_const.get_spike_counts()
        st_p_const=s_p_const.segments[0].spiketrains

        s_p_out=p_out.get_data("spikes")
        n_s_p_out=p_out.get_spike_counts()
        st_p_out=s_p_out.segments[0].spiketrains

        file.write(f"{i+1} | {len(time_steps)} | {n_s_p_const} | {n_s_p_out}\n")

        print("n_s_p_const, n_s_p_out: ", n_s_p_const, n_s_p_out)

        # sim.reset()

        sim.end()

        time.sleep(1)
